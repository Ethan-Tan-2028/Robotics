
public class Circle {
		public final Point center;
	public final double radius;
	

	public Circle(Point center, double radius) {
		this.center = center;
		this.radius = radius;
	}

	public double area() {
		return Math.PI * Math.pow(radius, 2);
	}

	public double perimeter() {
		return 2 * Math.PI * radius;
	}

	public boolean isInside(Point p) {
		return Point.distance(center, p) < radius;
	}


	public boolean isOn(Point p) {
		return Point.distance(center, p) == radius;
	}


	public Circle translate(double x, double y) {
		return new Circle(center.translateX(x).translateY(y), radius);
	}


	public Circle scale(double k) {
		return new Circle(center, radius * k);
	}
	public static Circle fromPoints(Point p1, Point p2, Point p3) {
	
		// Calculate the circumcenter 
		double d1 = p1.x * p1.x + p1.y * p1.y;
		double d2 = p2.x * p2.x + p2.y * p2.y;
		double d3 = p3.x * p3.x + p3.y * p3.y;
	
		double denominator = 2 * (p1.x * (p2.y - p3.y) + p2.x * (p3.y - p1.y) + p3.x * (p1.y - p2.y));
	
		double centerX = (d1 * (p2.y - p3.y) + d2 * (p3.y - p1.y) + d3 * (p1.y - p2.y)) / denominator;
		double centerY = (d1 * (p3.x - p2.x) + d2 * (p1.x - p3.x) + d3 * (p2.x - p1.x)) / denominator;
	//------------------------------------------------------------------------------------------------
		Point center = new Point(centerX, centerY);
	
		double radius = Point.distance(center, p1);
	
		return new Circle(center, radius);
	}
	


	@Override
	public String toString() {
		return "(center: " + center + "; radius: " + radius + ")";
	}
}
----------------------------------------------------------------------------


public class Main {

    public static void main(String[] args) {
      Point centerPoint = new Point(3, 0);
      Circle test = new Circle (centerPoint,5);
Point p1 = new Point(5,3);
Point p2 = new Point(4,2);
Point p3 = new Point(0,8);
System.out.println(test.fromPoints(p1, p2, p3));
     
    }

}
     


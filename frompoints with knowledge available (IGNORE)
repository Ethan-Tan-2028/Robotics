public class Circle {
		public final Point center;
	public final double radius;
	

	public Circle(Point center, double radius) {
		this.center = center;
		this.radius = radius;
	}

	public double area() {
		return Math.PI * Math.pow(radius, 2);
	}

	public double perimeter() {
		return 2 * Math.PI * radius;
	}

	/** 
	* @return Whether point p is inside of the circle.
	*/
	public boolean isInside(Point p) {
		return Point.distance(center, p) < radius;
	}

	/** 
	* @return Whether point p part of/on the border of the circle.
	*/
	public boolean isOn(Point p) {
		return Point.distance(center, p) == radius;
	}

	/** 
	* @param x How much to translate the circle by in the + x direction.
	* @param y How much to translate the circle by in the + y direction.
	* @return The circle that results from the translation.
	*/
	public Circle translate(double x, double y) {
		return new Circle(center.translateX(x).translateY(y), radius);
	}

	/** 
	* @return The circle that results from scaling by k.
	*/
	public Circle scale(double k) {
		return new Circle(center, radius * k);
	}

	public static Circle fromPoints(Point p1, Point p2, Point p3){
Point center = new Point (0,0);
Circle project =  new Circle(center,Point.distance(center, p1));
//if Circle passes through p1, p2, and p3 create circle
if (project.isOn(p1)==false){			
	return null;
}
if (project.isOn(p2)==false){			
	return null;
}
if (project.isOn(p3)==false){			
	return null;
}


return new Circle(center,Point.distance(center, p3));


	}

	@Override
	public String toString() {
		return "(center: " + center + "; radius: " + radius + ")";
	}
}
----------------------------------------------------------------------------
public class Main {
   public interface Shape {
      public double area();
   
      public double perimeter();
   
      /** 
      * @return Whether point p is inside of the shape.
      */
      public boolean isInside(Point p);
      /** 
      * @return Whether point p part of/on the border of the shape.
      */
      public boolean isOn(Point p);
   
      /** 
      * @param x How much to translate the shape by in the + x direction.
      * @param y How much to translate the shape by in the + y direction.
      * @return The shape that results from the translation.
      */
      public Shape translate(double x, double y);
   
      /** 
      * @return The shape that results from scaling by k.
      */
      public Shape scale(double k);

   }
    public static void main(String[] args) {
      Point centerPoint = new Point(3, 0);
      Circle test = new Circle (centerPoint,5);
Point p1 = new Point(5,3);
Point p2 = new Point(4,2);
Point p3 = new Point(0,8);
System.out.println(test.fromPoints(p1, p2, p3));
     
    }

}
